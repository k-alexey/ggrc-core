#!/usr/bin/env bash
# Copyright (C) 2020 Google Inc.
# Licensed under http://www.apache.org/licenses/LICENSE-2.0 <see LICENSE file>

set -o nounset
set -o errexit

declare -r TMP_REPO="/tmp/ggrc-core"
declare -r SCRIPT=$(basename "$0")
declare -r SCRIPTPATH=$( cd "$(dirname "$0")" ; pwd -P )

usage () {
  cat <<EOF
Usage: $SCRIPT [test_commit] [-h]

This script will compare pylint error count from two different commits.
Note: all changes that are not committed will be ignored.


Given the commit tree:

       D---E---F---G---H
            \\         /
             A---B---C

- Running '$SCRIPT' on C will check the diff between B and C
- Running '$SCRIPT' on H will check the diff between G and H
- Running '$SCRIPT F' on H will check the diff between F and H
EOF
}

main () {
  if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    usage
  fi

  local -r CURRENT_COMMIT=$(git rev-parse HEAD)
  local OLD_COMMIT="${1:-}"

  if [[ -z "${OLD_COMMIT}" ]]; then
    OLD_COMMIT="$CURRENT_COMMIT^1"
  fi

  OLD_COMMIT=$(git rev-parse "$OLD_COMMIT")

  rm -rf "$TMP_REPO"
  mkdir -p "$TMP_REPO"
  cd "$TMP_REPO"
  git clone /vagrant "$TMP_REPO"

  echo "Comparing commits $OLD_COMMIT and $CURRENT_COMMIT."

  CHANGED_FILES=$(git diff --name-only $OLD_COMMIT $CURRENT_COMMIT | grep "\.py$" || true)
  if [[ "$CHANGED_FILES" == "" ]]; then
    echo "No python files changed. Skipping pylint checks"
    exit 0
  fi

  echo "Checking files:"
  echo "$CHANGED_FILES"
  echo ""

  # Run pylint on the old and new code, to compare the quality.
  # If pylint is run multiple times it will store the previous results and show
  # the change in quality with a non-negative number if code was improved or not
  # changed, and a negative number if more code issues have been introduced.
  echo "running pylint on old commit"
  RESULT_1=$(run_pylint "$OLD_COMMIT" "$CHANGED_FILES")

  echo "running pylint on current commit"
  RESULT_2=$(run_pylint "$CURRENT_COMMIT" "$CHANGED_FILES")

  echo "
  -------------------------------------------------------------------------------
  "
  cat "$CURRENT_COMMIT.pylint"
  echo "
  -------------------------------------------------------------------------------
  "
  echo "Pylint results."
  echo "Number of issues on old commit: $RESULT_1"
  echo "Number of issues on current commit: $RESULT_2"
  if [ "$RESULT_2" -le "$RESULT_1" ]; then
    echo "Ok"
    exit 0
  else
    echo "FAIL: pylint score got worse"
    exit 1
  fi
}

function run_pylint() {
  COMMIT="$1"
  CHANGED_FILES="$2"

  git checkout -q "$COMMIT"
  git clean -xdfq
  git reset -q --hard HEAD

  result=$(echo "$CHANGED_FILES" | xargs pylint 2> /dev/null | tee "$COMMIT.pylint" | tail -n2 | \
    grep -E " [^ ]+/10" -o | head -n1 | grep -E -e "[^\.]+" -o | head -n1 \
    || true )

  if [[ "$result" != "" ]]; then
    echo $result
  else
    echo "0"
  fi
}

main "$@"
